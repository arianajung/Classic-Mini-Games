package com.example.myapplication.hangman;/** The game logic of the hangman game. */class HangmanGameInteractor {  interface OnValidateCharListener {    /** Display an empty error on the display. */    void onEmptyError();    /**     * Display a letter used error on the display.     *     * @param c the letter that was already guessed.     */    void onLetterUsedError(char c);    /** Display all necessary views onto the display. */    void onDisplayViews();    /**     * Display a game ended activity.     *     * @param hm the hangman game status.     */    void onGameEnd(HangmanGameStatus hm);    /** Display that the word guessed was incorrect. */    void onGuessWordFailed();  }  /** The game status of this hangman game. */  private HangmanGameStatus hangmanGameStat;  /**   * Constructs this hangman game interactor.   *   * @param hangmanGameStat the game status of this hangman game.   */  HangmanGameInteractor(HangmanGameStatus hangmanGameStat) {    this.hangmanGameStat = hangmanGameStat;  }  /**   * Get the hangman game status.   *   * @return the hangman game status.   */  HangmanGameStatus getHangmanGameStat() {    return hangmanGameStat;  }  /**   * Generates all the necessary word attributes for the game.   *   * @param chosenWord the generated word for this hangman game.   */  void generateWord(String chosenWord) {    hangmanGameStat.setPlayed(true);    hangmanGameStat.setStageNum(hangmanGameStat.getStageNum() + 1);    hangmanGameStat.setSecretWord(chosenWord);    hangmanGameStat.setSecretWordCharArray(new char[hangmanGameStat.getSecretWord().length()]);    hangmanGameStat.setMaskedWordCharArray(new char[hangmanGameStat.getSecretWord().length()]);    for (int i = 0; i < hangmanGameStat.getSecretWord().length(); i++) {      hangmanGameStat.getMaskedWordCharArray()[i] = '_';      hangmanGameStat.getSecretWordCharArray()[i] = hangmanGameStat.getSecretWord().charAt(i);    }    hangmanGameStat.setDisplayedMaskedWord(generateDisplayedMaskedWord());  }  /**   * Checks whether if the guessed letter is in the secret word or not.   *   * @param letter the letter that was guessed by the user.   * @param listener the listener that gets the result from this method.   */  void validateLetter(char letter, HangmanGamePresenter listener) {    if (LetterNotInGuessed(letter)) {      checkLetter(letter);      listener.onDisplayViews();    } else {      listener.onLetterUsedError(letter);    }    checkIfGameEnded(listener);  }  /**   * Check whether the letter guessed was already used.   *   * @param guessedLetter letter guessed by the user.   * @return true if guessedLetter was not already guessed, false otherwise.   */  private boolean LetterNotInGuessed(char guessedLetter) {    if (!hangmanGameStat.getLettersGuessed().toString().contains(String.valueOf(guessedLetter))) {      updateLettersGuessed(guessedLetter);      return true;    } else {      return false;    }  }  /**   * Update the letters guessed.   *   * @param guessedLetter the letter guessed by the user.   */  private void updateLettersGuessed(char guessedLetter) {    String letter = guessedLetter + ", ";    hangmanGameStat.setLettersGuessed(hangmanGameStat.getLettersGuessed().append(letter));  }  /**   * Checks whether if the letter guessed was correct or not.   *   * @param guessedLetter the letter that was guessed.   */  private void checkLetter(char guessedLetter) {    if (!hangmanGameStat.getSecretWord().contains(String.valueOf(guessedLetter))) {      decreaseScore();      hangmanGameStat.setFalseGuess(hangmanGameStat.getFalseGuess() + 1);    } else {      revealLetter(guessedLetter);    }  }  /** Decreases the current score by 20 points. */  private void decreaseScore() {    hangmanGameStat.setCurrentScore(hangmanGameStat.getCurrentScore() - 20);  }  /**   * Reveals the letter guessed in masked word (if the letter is in the secret word).   *   * @param guessedLetter the letter guessed by the user.   */  private void revealLetter(char guessedLetter) {    for (int i = 0; i < hangmanGameStat.getSecretWordCharArray().length; i++) {      if (hangmanGameStat.getSecretWordCharArray()[i] == guessedLetter) {        hangmanGameStat.getMaskedWordCharArray()[i] = guessedLetter;      }    }    hangmanGameStat.setDisplayedMaskedWord(generateDisplayedMaskedWord());  }  /**   * Generates a StringBuilder representation of maskedWordCharArray.   *   * @return Stringbuilder the displayed masked word in the activity   */  private StringBuilder generateDisplayedMaskedWord() {    StringBuilder maskedWord = new StringBuilder();    for (char letter : hangmanGameStat.getMaskedWordCharArray()) {      maskedWord.append(letter);      maskedWord.append(" ");    }    return maskedWord;  }  /**   * Checks whether if the guessed word is equal to the secret word.   *   * @param guessedWord the word guessed by the user.   * @param listener the listener that gets the result from this method.   */  void validateWord(String guessedWord, HangmanGamePresenter listener) {    if (guessedWord.equalsIgnoreCase(hangmanGameStat.getSecretWord())) {      hangmanGameStat.setMaskedWordCharArray(hangmanGameStat.getSecretWord().toCharArray());    } else {      decreaseScore();      hangmanGameStat.setFalseGuess(hangmanGameStat.getFalseGuess() + 1);      listener.onGuessWordFailed();    }    checkIfGameEnded(listener);  }  /** Updates the accumulated score if the game has ended. */  private void checkIfGameEnded(HangmanGamePresenter listener) {    if (gameEnded()) {      int newScore = hangmanGameStat.getAccumulatedScore() + hangmanGameStat.getCurrentScore();      hangmanGameStat.setAccumulatedScore(newScore);      listener.onGameEnd(hangmanGameStat);    }  }  /**   * Checks whether if the game has ended or not.   *   * @return true if game has ended, false otherwise.   */  boolean gameEnded() {    if (hangmanGameStat.getMaskedWordCharArray() != null) {      return hangmanGameStat.getFalseGuess() == 6          || !String.valueOf(hangmanGameStat.getMaskedWordCharArray()).contains("_");    }    return false;  }}