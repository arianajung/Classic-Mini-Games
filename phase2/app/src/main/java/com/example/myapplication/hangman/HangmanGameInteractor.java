package com.example.myapplication.hangman;class HangmanGameInteractor {    interface OnValidateCharListener {        void onEmptyError();        void onLetterUsedError(char c);        void onDisplayViews();        void onGameEnd(HangmanGameStatus hm);        void onGuessWordFailed();    }    private HangmanGameStatus hangmanGameStat;    HangmanGameInteractor(HangmanGameStatus hangmanGameStat) {        this.hangmanGameStat = hangmanGameStat;    }    HangmanGameStatus getHangmanGameStat() {        return hangmanGameStat;    }    /**     * Checks if the game has ended (either user has won or lost) and sends intent to     * HangmanStageEnded activity.     */    private void checkIfGameEnded(HangmanGamePresenter listener) {        if (gameEnded()) {            int newScore = hangmanGameStat.getAccumulatedScore() + hangmanGameStat.getCurrentScore();            hangmanGameStat.setAccumulatedScore(newScore);            listener.onGameEnd(hangmanGameStat);        }    }    private void checkLetter(char guessedLetter) {        if (!hangmanGameStat.getSecretWord().contains(String.valueOf(guessedLetter))) {            decreaseScore();            hangmanGameStat.setFalseGuess(hangmanGameStat.getFalseGuess() + 1);        } else {            revealLetter(guessedLetter);        }    }    /**     * Generating the word for the game     *     * @param chosenWord the generated word for this hangman game     */    void generateWord(String chosenWord) {        hangmanGameStat.setPlayed(true);        hangmanGameStat.setStageNum(hangmanGameStat.getStageNum() + 1);        hangmanGameStat.setSecretWord(chosenWord);        hangmanGameStat.setSecretWordCharArray(new char[hangmanGameStat.getSecretWord().length()]);        hangmanGameStat.setMaskedWordCharArray(new char[hangmanGameStat.getSecretWord().length()]);        for (int i = 0; i < hangmanGameStat.getSecretWord().length(); i++) {            hangmanGameStat.getMaskedWordCharArray()[i] = '_';            hangmanGameStat.getSecretWordCharArray()[i] = hangmanGameStat.getSecretWord().charAt(i);        }        hangmanGameStat.setDisplayedMaskedWord(generateDisplayedMaskedWord());    }    /**     * Method to update the letter guessed in the masked word     *     * @param guessedLetter the letter guessed by the user     */    private void updateLettersGuessed(char guessedLetter) {        String letter = guessedLetter + ", ";        hangmanGameStat.setLettersGuessed(hangmanGameStat.getLettersGuessed().append(letter));    }    /**     * Check whether the letter guessed is already used     *     * @param guessedLetter: Letter chosen by the user     * @return boolean whether if the guessedLetter was already guessed or not     */    private boolean LetterNotInGuessed(char guessedLetter) {        if (!hangmanGameStat.getLettersGuessed().toString().contains(String.valueOf(guessedLetter))) {            updateLettersGuessed(guessedLetter);            return true;        } else {            return false;        }    }    /** Method to decrease the currentScore when the guessed letter is not in the secret word */    private void decreaseScore() {        hangmanGameStat.setCurrentScore(hangmanGameStat.getCurrentScore() - 20);    }    /**     * method to reveal the letter in activity     *     * @param guessedLetter the letter guessed by the user     */    private void revealLetter(char guessedLetter) {        for (int i = 0; i < hangmanGameStat.getSecretWordCharArray().length; i++) {            if (hangmanGameStat.getSecretWordCharArray()[i] == guessedLetter) {                hangmanGameStat.getMaskedWordCharArray()[i] = guessedLetter;            }        }        hangmanGameStat.setDisplayedMaskedWord(generateDisplayedMaskedWord());    }    /**     * A method that generate the displayed masked word in the activity     *     * @return Stringbuilder the displayed masked word in the activity     */    private StringBuilder generateDisplayedMaskedWord() {        StringBuilder maskedWord = new StringBuilder();        for (char letter : hangmanGameStat.getMaskedWordCharArray()) {            maskedWord.append(letter);            maskedWord.append(" ");        }        return maskedWord;    }    void validateChar(char c, HangmanGamePresenter listener) {        if (LetterNotInGuessed(c)) {            checkLetter(c);            listener.onDisplayViews();        } else {            listener.onLetterUsedError(c);        }        checkIfGameEnded(listener);    }    void validateWord(String guessedWord, HangmanGamePresenter listener) {        if (guessedWord.equalsIgnoreCase(hangmanGameStat.getSecretWord())) {            hangmanGameStat.setMaskedWordCharArray(hangmanGameStat.getSecretWord().toCharArray());        } else {            decreaseScore();            hangmanGameStat.setFalseGuess(hangmanGameStat.getFalseGuess() + 1);            listener.onGuessWordFailed();        }        checkIfGameEnded(listener);    }    boolean gameEnded() {        if (hangmanGameStat.getMaskedWordCharArray() != null) {            return hangmanGameStat.getFalseGuess() == 6 ||                    !String.valueOf(hangmanGameStat.getMaskedWordCharArray()).contains("_");        }        return false;    }}